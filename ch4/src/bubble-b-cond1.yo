                            | # Execution begins at address 0
0x000:                      |     .pos 0
0x000: 30f40002000000000000 |     irmovq stack, %rsp
0x00a: 803800000000000000   |     call   main
0x013: 00                   |     halt
                            | 
                            | # Array of 4 elements
0x018:                      |     .align 8
0x018:                      | array:
0x018: 0400000000000000     |     .quad 0x0000000000000004
0x020: 0300000000000000     |     .quad 0x0000000000000003
0x028: 0200000000000000     |     .quad 0x0000000000000002
0x030: 0100000000000000     |     .quad 0x0000000000000001
                            | 
0x038:                      | main:
0x038: 30f71800000000000000 |     irmovq array, %rdi
0x042: 30f62000000000000000 |     irmovq $32, %rsi
0x04c: 805600000000000000   |     call   bubble_cond
0x055: 90                   |     ret
                            | 
0x056:                      | bubble_cond:
0x056: 6076                 |     addq   %rdi, %rsi
0x058: 30f80800000000000000 |     irmovq $8, %r8
0x062: 6186                 |     subq   %r8, %rsi
0x064: 70d100000000000000   |     jmp    L2
                            | 
0x06d:                      | L4:
0x06d: 50b00800000000000000 |     mrmovq 8(%rax), %r11  # *(array+1) in %r11
0x077: 50900000000000000000 |     mrmovq (%rax),  %r9   # *array in %r9
0x081: 20ba                 |     rrmovq %r11, %r10     # *(array+1) in %r10
0x083: 2098                 |     rrmovq %r9,  %r8      # *array in %r8
0x085: 609a                 |     addq   %r9, %r10      # *(array+1) + *array in %r10
0x087: 61b8                 |     subq   %r11, %r8      # *(array+1) - *array in %r8
                            | # use at most 1 conditional mov
0x089: 269b                 |     cmovg  %r9, %r11
0x08b: 61ba                 |     subq   %r11, %r10
0x08d: 40b00800000000000000 |     rmmovq %r11, 8(%rax)
0x097: 40a00000000000000000 |     rmmovq %r10, (%rax)
                            | # finish swap of two memory positions
0x0a1: 30f80800000000000000 |     irmovq $8, %r8
0x0ab: 6080                 |     addq   %r8, %rax
0x0ad: 70b800000000000000   |     jmp    L5
                            | 
0x0b6:                      | L6:
0x0b6: 2070                 |     rrmovq %rdi, %rax
                            | 
0x0b8:                      | L5: # inner loop
0x0b8: 2068                 |     rrmovq %rsi, %r8
0x0ba: 6108                 |     subq   %rax, %r8
0x0bc: 766d00000000000000   |     jg     L4
0x0c5: 30f80800000000000000 |     irmovq $8, %r8
0x0cf: 6186                 |     subq   %r8, %rsi   # update pointer of external loop
                            | 
0x0d1:                      | L2: # external loop
0x0d1: 2068                 |     rrmovq %rsi, %r8
0x0d3: 6178                 |     subq   %rdi, %r8   # compare start and last of array
0x0d5: 76b600000000000000   |     jg     L6
0x0de: 90                   |     ret
                            | 
                            | # Stack starts here and grows to lower address
0x200:                      |     .pos   0x200
0x200:                      | stack:
