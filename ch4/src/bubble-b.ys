# Execution begins at address 0
    .pos 0
    irmovq stack, %rsp  # Set up stack pointer
    call   main         # Execute main program
    halt                # Terminate program

# Array of 4 elements
    .align 8
array:
    .quad 0x0000000000000004
    .quad 0x0000000000000003
    .quad 0x0000000000000002
    .quad 0x0000000000000001

main:
    irmovq array, %rdi
    irmovq $32, %rsi
    call   bubble_b
    ret

# long bubble_b(long *array, long count)
# array in %rdi, count in %rsi
bubble_b:
    addq   %rdi, %rsi
    irmovq $8, %r8
    subq   %r8, %rsi
    jmp    L2

L4:
    mrmovq 8(%rax), %r9   # *(array+i)
    mrmovq (%rax), %r10   # *(array)
    rrmovq %r9, %r8
    subq   %r10, %r8
    jge    L3
    rmmovq %r10, 8(%rax)  # swap two elements
    rmmovq %r9, (%rax)

L3:
    irmovq $8, %r8
    addq   %r8, %rax
    jmp    L5

L6:
    rrmovq %rdi, %rax

L5: # inner loop
    rrmovq %rsi, %r8
    subq   %rax, %r8
    jg     L4
    irmovq $8, %r8
    subq   %r8, %rsi   # update pointer of external loop

L2: # external loop
    rrmovq %rsi, %r8
    subq   %rdi, %r8   # compare start and last of array
    jg     L6
    ret

# Stack starts here and grows to lower address
    .pos   0x200
stack:
