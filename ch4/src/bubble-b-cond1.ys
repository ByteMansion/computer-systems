# Execution begins at address 0
    .pos 0
    irmovq stack, %rsp
    call   main
    halt

# Array of 4 elements
    .align 8
array:
    .quad 0x0000000000000004
    .quad 0x0000000000000003
    .quad 0x0000000000000002
    .quad 0x0000000000000001

main:
    irmovq array, %rdi
    irmovq $32, %rsi
    call   bubble_cond
    ret

bubble_cond:
    addq   %rdi, %rsi
    irmovq $8, %r8
    subq   %r8, %rsi
    jmp    L2

L4:
    mrmovq 8(%rax), %r11  # *(array+1) in %r11
    mrmovq (%rax),  %r9   # *array in %r9
    rrmovq %r11, %r10     # *(array+1) in %r10
    rrmovq %r9,  %r8      # *array in %r8
    addq   %r9, %r10      # *(array+1) + *array in %r10
    subq   %r11, %r8      # *(array+1) - *array in %r8
# use at most 1 conditional mov
    cmovg  %r9, %r11
    subq   %r11, %r10
    rmmovq %r11, 8(%rax)
    rmmovq %r10, (%rax)
# finish swap of two memory positions
    irmovq $8, %r8
    addq   %r8, %rax
    jmp    L5

L6:
    rrmovq %rdi, %rax

L5: # inner loop
    rrmovq %rsi, %r8
    subq   %rax, %r8
    jg     L4
    irmovq $8, %r8
    subq   %r8, %rsi   # update pointer of external loop

L2: # external loop
    rrmovq %rsi, %r8
    subq   %rdi, %r8   # compare start and last of array
    jg     L6
    ret

# Stack starts here and grows to lower address
    .pos   0x200
stack:
