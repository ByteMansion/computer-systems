                            | # Execution begins at address 0
0x000:                      |     .pos 0
0x000: 30f40002000000000000 |     irmovq stack, %rsp
0x00a: 803800000000000000   |     call   main
0x013: 00                   |     halt
                            | 
                            | # Array of 4 elements
0x018:                      |     .align 8
0x018:                      | array:
0x018: 0400000000000000     |     .quad 0x0000000000000004
0x020: 0900000000000000     |     .quad 0x0000000000000009
0x028: 0100000000000000     |     .quad 0x0000000000000001
0x030: 0f00000000000000     |     .quad 0x000000000000000f
                            | 
0x038:                      | main:
0x038: 30f71800000000000000 |     irmovq array, %rdi
0x042: 30f62000000000000000 |     irmovq $32, %rsi
0x04c: 805600000000000000   |     call   bubble_cond
0x055: 90                   |     ret
                            | 
0x056:                      | bubble_cond:
0x056: 6076                 |     addq   %rdi, %rsi
0x058: 30f80800000000000000 |     irmovq $8, %r8
0x062: 6186                 |     subq   %r8, %rsi
0x064: 70cf00000000000000   |     jmp L2
                            | 
0x06d:                      | L4:
0x06d: 50900800000000000000 |     mrmovq 8(%rax), %r9   # *(array+1) in %r9
0x077: 50a00000000000000000 |     mrmovq (%rax), %r10   # *array   in %r10
0x081: 2098                 |     rrmovq %r9, %r8       # *(array+1) in %r8
0x083: 61a8                 |     subq   %r10, %r8      # *(array+1) - *array
                            | # use three conditional movs
0x085: 229b                 |     cmovl  %r9, %r11
0x087: 22a9                 |     cmovl  %r10, %r9
0x089: 22ba                 |     cmovl  %r11, %r10
0x08b: 40900800000000000000 |     rmmovq %r9, 8(%rax)
0x095: 40a00000000000000000 |     rmmovq %r10, (%rax)
                            | # finish swap of two memory position
0x09f: 30f80800000000000000 |     irmovq $8, %r8
0x0a9: 6080                 |     addq   %r8, %rax
0x0ab: 70b600000000000000   |     jmp    L5
                            | 
0x0b4:                      | L6:
0x0b4: 2070                 |     rrmovq %rdi, %rax
                            | 
0x0b6:                      | L5: # inner loop
0x0b6: 2068                 |     rrmovq %rsi, %r8
0x0b8: 6108                 |     subq   %rax, %r8
0x0ba: 766d00000000000000   |     jg     L4
0x0c3: 30f80800000000000000 |     irmovq $8, %r8
0x0cd: 6186                 |     subq   %r8, %rsi   # update pointer of external loop
                            | 
0x0cf:                      | L2: # external loop
0x0cf: 2068                 |     rrmovq %rsi, %r8
0x0d1: 6178                 |     subq   %rdi, %r8   # compare start and last of array
0x0d3: 76b400000000000000   |     jg     L6
0x0dc: 90                   |     ret
                            | 
                            | # Stack starts here and grows to lower address
0x200:                      |     .pos   0x200
0x200:                      | stack:
